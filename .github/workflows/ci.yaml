name: Go Refactoring Tool CI

on:
  push:
    branches:
      - main
      - '**'  # All branches
  pull_request:
    branches:
      - main

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.1'
          cache: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r rds_schema_lambda/requirements_test.txt
          pip install pylint

      - name: Install Go Dependencies
        run: |
          go mod tidy
          cd stack && go mod tidy

      - name: Install golangci-lint v2
        run: |
          curl -sSfL https://github.com/golangci/golangci-lint/releases/download/v2.0.0/golangci-lint-2.0.0-linux-amd64.tar.gz | tar -xz
          sudo mv golangci-lint-2.0.0-linux-amd64/golangci-lint /usr/local/bin/
          golangci-lint version

      - name: Run Linter
        run: |
          golangci-lint -v run
          cd stack && golangci-lint -v run

      - name: Run Python Linting
        run: |
          cd rds_schema_lambda && pylint --rcfile=../.pylintrc *.py

      - name: Run Tests
        run: |
          go test -v ./...

      - name: Run Infra Tests
        run: |
          cd stack && go test -v ./...

      - name: Run Lambda Tests
        run: |
          cd rds_schema_lambda && pytest .

  deploy-infra:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.1'
          cache: false

      - name: Set up Node.js for CDK
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Configure AWS credentials for Infrastructure
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_INFRA_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Deploy Infrastructure
        run: make deploy

      - name: Verify Infrastructure Deployment
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
        run: |
          echo "üîß Verifying infrastructure deployment..."
          
          # Get stack outputs
          USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name CodeRefactorInfra --query 'Stacks[0].Outputs[?OutputKey==`CognitoUserPoolID`].OutputValue' --output text)
          CLIENT_ID=$(aws cloudformation describe-stacks --stack-name CodeRefactorInfra --query 'Stacks[0].Outputs[?OutputKey==`CognitoUserPoolClientID`].OutputValue' --output text)
          API_URL=$(aws cloudformation describe-stacks --stack-name CodeRefactorInfra --query 'Stacks[0].Outputs[?OutputKey==`APIGatewayURL`].OutputValue' --output text)
          
          echo "‚úÖ Infrastructure deployed successfully:"
          echo "   User Pool ID: $USER_POOL_ID"
          echo "   Client ID: $CLIENT_ID"
          echo "   API URL: $API_URL"
          
          # Test API endpoint (health check should be publicly accessible)
          HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" $API_URL/health)
          echo "Health check status: $HEALTH_CHECK"
          
          if [ "$HEALTH_CHECK" = "200" ]; then
            echo "‚úÖ API is accessible!"
          else
            echo "‚ö†Ô∏è API might not be fully ready yet (status: $HEALTH_CHECK)"
          fi
          
          echo "üéâ Infrastructure verification complete!"
          echo "ÔøΩ Users can now be created manually via AWS Cognito Console or CLI"

      - name: Store Infrastructure Outputs in Parameter Store and Secrets Manager
        run: |
          echo "üì§ Storing infrastructure outputs in AWS Parameter Store and Secrets Manager..."
          
          # Get stack outputs
          API_URL=$(aws cloudformation describe-stacks --stack-name CodeRefactorInfra --query 'Stacks[0].Outputs[?OutputKey==`APIGatewayURL`].OutputValue' --output text)
          USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name CodeRefactorInfra --query 'Stacks[0].Outputs[?OutputKey==`CognitoUserPoolID`].OutputValue' --output text)
          CLIENT_ID=$(aws cloudformation describe-stacks --stack-name CodeRefactorInfra --query 'Stacks[0].Outputs[?OutputKey==`CognitoUserPoolClientID`].OutputValue' --output text)
          HOSTED_UI_URL=$(aws cloudformation describe-stacks --stack-name CodeRefactorInfra --query 'Stacks[0].Outputs[?OutputKey==`CognitoHostedUIURL`].OutputValue' --output text)
          ECR_URI=$(aws cloudformation describe-stacks --stack-name CodeRefactorInfra --query 'Stacks[0].Outputs[?OutputKey==`ECRRepositoryURI`].OutputValue' --output text)
          FRONTEND_BUCKET=$(aws cloudformation describe-stacks --stack-name CodeRefactorInfra --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucketName`].OutputValue' --output text)
          CLOUDFRONT_DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name CodeRefactorInfra --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionID`].OutputValue' --output text)
          CLOUDFRONT_DOMAIN=$(aws cloudformation describe-stacks --stack-name CodeRefactorInfra --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionDomainName`].OutputValue' --output text)
          
          # Get additional secret values
          RDS_SECRET_ARN=$(aws cloudformation describe-stacks --stack-name CodeRefactorInfra --query 'Stacks[0].Outputs[?OutputKey==`RDSPostgresCredentialsSecretARN`].OutputValue' --output text)
          S3_BUCKET=$(aws cloudformation describe-stacks --stack-name CodeRefactorInfra --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' --output text)
          BEDROCK_KB_ROLE_ARN=$(aws cloudformation describe-stacks --stack-name CodeRefactorInfra --query 'Stacks[0].Outputs[?OutputKey==`BedrockKnowledgeBaseRoleArn`].OutputValue' --output text)
          BEDROCK_AGENT_ROLE_ARN=$(aws cloudformation describe-stacks --stack-name CodeRefactorInfra --query 'Stacks[0].Outputs[?OutputKey==`BedrockAgentRoleArn`].OutputValue' --output text)
          
          echo "‚úÖ Infrastructure deployment configuration stored successfully!"
          echo "   Parameter Store and Secrets Manager have been populated by the CDK stack"
          echo "   Applications can now fetch configuration using AWS SDKs"

  test:
    needs: deploy-infra
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Run Tests
        run: make test
