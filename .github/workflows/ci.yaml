name: Go Refactoring Tool CI

on:
  push:
    branches:
      - main
      - '**'  # All branches
  pull_request:
    branches:
      - main

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.1'
          cache: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r rds_schema_lambda/requirements_test.txt
          pip install pylint

      - name: Install Go Dependencies
        run: |
          go mod tidy
          cd stack && go mod tidy

      - name: Install golangci-lint v2
        run: |
          curl -sSfL https://github.com/golangci/golangci-lint/releases/download/v2.0.0/golangci-lint-2.0.0-linux-amd64.tar.gz | tar -xz
          sudo mv golangci-lint-2.0.0-linux-amd64/golangci-lint /usr/local/bin/
          golangci-lint version

      - name: Run Linter
        run: |
          golangci-lint -v run
          cd stack && golangci-lint -v run

      - name: Run Python Linting
        run: |
          cd rds_schema_lambda && pylint --rcfile=../.pylintrc *.py

      - name: Run Tests
        run: |
          go test -v ./...

      - name: Run Infra Tests
        run: |
          cd stack && go test -v ./...

      - name: Run Lambda Tests
        run: |
          cd rds_schema_lambda && pytest .

  deploy-infra:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.1'
          cache: false

      - name: Set up Node.js for CDK
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Configure AWS credentials for Infrastructure
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_INFRA_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Deploy Infrastructure
        run: make deploy

      - name: Verify Infrastructure Deployment
        run: |
          echo "üîß Verifying infrastructure deployment..."
          
          # Verify stack exists and is in good state
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name CodeRefactorInfra --query 'Stacks[0].StackStatus' --output text)
          echo "Stack Status: $STACK_STATUS"
          
          if [[ "$STACK_STATUS" == *"COMPLETE"* ]]; then
            echo "‚úÖ Infrastructure deployed successfully!"
            echo "‚ú® Configuration automatically stored in Parameter Store and Secrets Manager by CDK!"
          else
            echo "‚ùå Infrastructure deployment failed with status: $STACK_STATUS"
            exit 1
          fi
